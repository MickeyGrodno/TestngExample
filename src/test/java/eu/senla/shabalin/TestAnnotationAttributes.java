package eu.senla.shabalin;

public class TestAnnotationAttributes {
}


//          description: можно указать описание тестового метода.
//        Например, @Test(description=”этот тест проверяет вход в систему”).

//          alwaysRun: этот атрибут гарантирует, что тестовый метод будет выполнен всегда, даже в случае падения тестов,
//        от которых он зависит. Когда значение атрибута true, этот метод будет запускаться всегда.
//        Например, @Test(alwaysRun= true).

//          dataProvider: задаёт имя поставщика данных (data provider) для тестового метода. Предположим, что вы
//        собираетесь запускать свои тесты в нескольких браузерах, тогда в тестовом методе с атрибутом dataProvider,
//        можно добавить параметры для браузера и его версии, которые будут передаваться в метод поставщиком данных.
//        В этом случае тест, содержащий этот атрибут, будет использовать эти входные данные для запуска тестов в нескольких
//        браузерах.
//        Например, @Test(dataProvider=”cross-browser-testing”).

//          dependsOnMethods: предоставляет информацию о порядке выполнения тестов. Тест с этим атрибутом будет выполнен,
//        только если успешно выполниться тест, от которого он зависит.
//        Если тест, от которого зависит метод, падает, то тест не запускается.
//        Например, @Test (depenOnmethod = “login”).

//          groups: помогает сгруппировать ваши тестовые методы, ориентированные на одну функциональность, в одну группу.
//        Например, @Test(groups=”Payment_Module”).
//        Этот атрибут также позволяет управлять тем, какие тесты запускать. При запуске тестов можно игнорировать
//        какие-то группы или, наоборот, запустить только некоторые группы. Всё, что нужно сделать, это указать нужные
//        группы в файле TestNG.xml. В теге include указать группы, которые необходимо запустить, а в теге exclude, которые
//        надо игнорировать.

//          dependsOnGroups: выполняет функции двух, вышеупомянутых атрибутов, то есть определяет зависимость тестового
//        метода от указанной группы. Этот тестовый метод будет запущен только после того, как указанная группа тестов
//        будет выполнена.
//        Например, @Test (depenOnMethods = «Payment_Module»).

//          priority: помогает нам определить приоритет тестовых методов. Когда TestNG выполняет тестовые методы, он
//        может делать это в произвольном порядке. В сценарии, где вы хотите, чтобы ваши тесты выполнялись в нужном
//        порядке, вы можете использовать атрибут priority. Приоритет по умолчанию для всех тестовых методов равен 0.
//        Сначала выполняются тесты с меньшим значением priority.
//        Например, @Test (priority = 1), @Test (priority = 2). В этом случае сначала будет выполнен тест с приоритетом,
//        равным единице, а потом тест с приоритетом два.

//          enabled: этот атрибут используется, когда вам нужно игнорировать и не запускать определённый тест. Всё, что
//        вам нужно сделать, это установить его в false.
//        Например, @Test(enabled= false).

//          timeout: определяет время, за которое должен выполниться тест. Если выполнение теста превышает время,
//        определённое атрибутом, то тест завершится с ошибкой с выбросом исключения org.testng.internal.thread.ThreadTimeoutException
//        Например, @Test(timeOut= 500). Обратите внимание, что время указывается в миллисекундах.

//          invocationCount: работает точно так же, как цикл. Тест будет запущен столько раз, сколько указано в invocationCount.
//        Например, @Test(invocationCount = 5), будет запущен 5 раз.

//          invocationTimeOut: используется вместе с вышеуказанным атрибутом invocationCount. Значение этого атрибута
//        вместе с invocationCount указывает на то, что тест будет запущен столько раз, сколько указано в invocationCount,
//        и в течение времени, указанного в атрибуте invocationTimeOut.
//        Например, @Test(invocationCount = 5, invocationTimeOut = 20).

//          expectedExceptions: помогает обрабатывать исключения, выброс которых ожидается в тестовом методе. Если исключение,
//        указанное в атрибуте, выброшено тестовым методом, то тест прошёл успешно. В противном случае, отсутствие исключения
//        или выброс другого исключения, не указанного в атрибуте, провалит тест.
//        Например, @Test(expectedExceptions = {ArithmeticException.class }).